spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: openid, email, profile
    basic.enabled: false
  cloud:
    gcp:
      sql:
        database-name: catalog
        instance-connection-name: ${GCP_SQL_INSTANCE_CONNECTION_NAME}
  #User Profiles#
  data:
    mongodb:
      authentication-database: user-profiles
      host: ${MONGO_SERVER_URL}
      port: ${MONGO_SERVER_PORT}
      username: ${MONGO_USERNAME}
      password: ${MONGO_PASSWORD}
      database: user-profiles
  #User Profiles#
  flyway:
    user: ${MYSQL_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    schemas: catalog
    url: jdbc:mysql://google/catalog?cloudSqlInstance=${GCP_SQL_INSTANCE_CONNECTION_NAME}&socketFactory=com.google.cloud.sql.mysql.SocketFactory
    locations: classpath:db/migration
    baselineOnMigrate: true
  kafka:
    enabled: true
    bootstrap-servers: ${KAFKA_SERVER_URL}
    value-seriliazer: org.apache.kafka.common.serialization.StringSerializer
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    producer:
      client-id: kafka-message-producer
      acks: all
    topic:
      book-rating: book-rating

  jpa:
    hibernate:
      ddl-auto: validate

server:
  error:
    include-message: always

logging:
  level:
    com.productdock: INFO

file-logging-enabled: ${LOG_TO_FILE}

jwt:
  public.key: classpath:${USER_PROFILES_JWT_PUBLIC_KEY}

management:
  server:
    port: 8087
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'

# From gateway configs
cors:
  allowed:
    origins: ${FRONTEND_URL}

security:
  front-to-gateway:
    redirect-uri: ${FRONTEND_URL}

# From gateway configs

#User Profiles#
mongock:
  change-logs-scan-package: com.productdock.library.user.profiles.config.dbmigrations
#User Profiles#